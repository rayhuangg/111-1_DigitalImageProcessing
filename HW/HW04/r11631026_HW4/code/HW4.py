# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QFileDialog

import cv2, os, copy, math, cmath, time
import numpy as np
from matplotlib import pyplot as plt
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 606)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.tabWidget.setFont(font)
        self.tabWidget.setElideMode(QtCore.Qt.ElideLeft)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.button_file = QtWidgets.QPushButton(self.tab)
        self.button_file.setGeometry(QtCore.QRect(20, 20, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.button_file.setFont(font)
        self.button_file.setObjectName("button_file")
        self.button_fft = QtWidgets.QPushButton(self.tab)
        self.button_fft.setGeometry(QtCore.QRect(180, 20, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.button_fft.setFont(font)
        self.button_fft.setObjectName("button_fft")
        self.label_img_1 = QtWidgets.QLabel(self.tab)
        self.label_img_1.setGeometry(QtCore.QRect(30, 140, 200, 150))
        self.label_img_1.setAlignment(QtCore.Qt.AlignCenter)
        self.label_img_1.setObjectName("label_img_1")
        self.label_img_2 = QtWidgets.QLabel(self.tab)
        self.label_img_2.setGeometry(QtCore.QRect(290, 140, 200, 150))
        self.label_img_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_img_2.setObjectName("label_img_2")
        self.toolButton = QtWidgets.QToolButton(self.tab)
        self.toolButton.setGeometry(QtCore.QRect(250, 210, 22, 18))
        self.toolButton.setArrowType(QtCore.Qt.RightArrow)
        self.toolButton.setObjectName("toolButton")
        self.toolButton_2 = QtWidgets.QToolButton(self.tab)
        self.toolButton_2.setGeometry(QtCore.QRect(510, 210, 22, 18))
        self.toolButton_2.setArrowType(QtCore.Qt.RightArrow)
        self.toolButton_2.setObjectName("toolButton_2")
        self.label_img_7 = QtWidgets.QLabel(self.tab)
        self.label_img_7.setGeometry(QtCore.QRect(560, 140, 200, 150))
        self.label_img_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_img_7.setObjectName("label_img_7")
        self.textEdit = QtWidgets.QTextEdit(self.tab)
        self.textEdit.setGeometry(QtCore.QRect(290, 320, 211, 31))
        self.textEdit.setTabletTracking(False)
        self.textEdit.setObjectName("textEdit")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.label_img_4 = QtWidgets.QLabel(self.tab_2)
        self.label_img_4.setGeometry(QtCore.QRect(430, 250, 200, 150))
        self.label_img_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_img_4.setObjectName("label_img_4")
        self.label_threshold_2 = QtWidgets.QLabel(self.tab_2)
        self.label_threshold_2.setGeometry(QtCore.QRect(140, 180, 101, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_threshold_2.setFont(font)
        self.label_threshold_2.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_threshold_2.setObjectName("label_threshold_2")
        self.label_img_3 = QtWidgets.QLabel(self.tab_2)
        self.label_img_3.setGeometry(QtCore.QRect(140, 250, 200, 150))
        self.label_img_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_img_3.setObjectName("label_img_3")
        self.label_threshold_3 = QtWidgets.QLabel(self.tab_2)
        self.label_threshold_3.setGeometry(QtCore.QRect(430, 180, 141, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_threshold_3.setFont(font)
        self.label_threshold_3.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_threshold_3.setObjectName("label_threshold_3")
        self.button_file_2 = QtWidgets.QPushButton(self.tab_2)
        self.button_file_2.setGeometry(QtCore.QRect(20, 50, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.button_file_2.setFont(font)
        self.button_file_2.setObjectName("button_file_2")
        self.label_cutoff = QtWidgets.QLabel(self.tab_2)
        self.label_cutoff.setGeometry(QtCore.QRect(370, 100, 81, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_cutoff.setFont(font)
        self.label_cutoff.setObjectName("label_cutoff")
        self.horizontalSlider_cutoff = QtWidgets.QSlider(self.tab_2)
        self.horizontalSlider_cutoff.setGeometry(QtCore.QRect(190, 100, 160, 22))
        self.horizontalSlider_cutoff.setMinimum(1)
        self.horizontalSlider_cutoff.setMaximum(50)
        self.horizontalSlider_cutoff.setProperty("value", 1)
        self.horizontalSlider_cutoff.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_cutoff.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider_cutoff.setTickInterval(5)
        self.horizontalSlider_cutoff.setObjectName("horizontalSlider_cutoff")
        self.label_threshold_9 = QtWidgets.QLabel(self.tab_2)
        self.label_threshold_9.setGeometry(QtCore.QRect(170, 40, 231, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_threshold_9.setFont(font)
        self.label_threshold_9.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_threshold_9.setObjectName("label_threshold_9")
        self.label_threshold_10 = QtWidgets.QLabel(self.tab_2)
        self.label_threshold_10.setGeometry(QtCore.QRect(470, 40, 171, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_threshold_10.setFont(font)
        self.label_threshold_10.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_threshold_10.setObjectName("label_threshold_10")
        self.comboBox_filter = QtWidgets.QComboBox(self.tab_2)
        self.comboBox_filter.setGeometry(QtCore.QRect(470, 100, 191, 21))
        self.comboBox_filter.setObjectName("comboBox_filter")
        self.comboBox_filter.addItem("")
        self.comboBox_filter.addItem("")
        self.comboBox_filter.addItem("")
        self.comboBox_filter.addItem("")
        self.comboBox_filter.addItem("")
        self.comboBox_filter.addItem("")
        self.button_go = QtWidgets.QPushButton(self.tab_2)
        self.button_go.setGeometry(QtCore.QRect(680, 70, 51, 51))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.button_go.setFont(font)
        self.button_go.setObjectName("button_go")
        self.label_threshold_11 = QtWidgets.QLabel(self.tab_2)
        self.label_threshold_11.setGeometry(QtCore.QRect(650, 40, 171, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_threshold_11.setFont(font)
        self.label_threshold_11.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_threshold_11.setObjectName("label_threshold_11")
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.button_file_3 = QtWidgets.QPushButton(self.tab_3)
        self.button_file_3.setGeometry(QtCore.QRect(40, 30, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.button_file_3.setFont(font)
        self.button_file_3.setObjectName("button_file_3")
        self.label_threshold_4 = QtWidgets.QLabel(self.tab_3)
        self.label_threshold_4.setGeometry(QtCore.QRect(40, 80, 141, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_threshold_4.setFont(font)
        self.label_threshold_4.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_threshold_4.setObjectName("label_threshold_4")
        self.label_brightness = QtWidgets.QLabel(self.tab_3)
        self.label_brightness.setGeometry(QtCore.QRect(220, 140, 81, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_brightness.setFont(font)
        self.label_brightness.setText("")
        self.label_brightness.setObjectName("label_brightness")
        self.horizontalSlider_gh = QtWidgets.QSlider(self.tab_3)
        self.horizontalSlider_gh.setGeometry(QtCore.QRect(40, 140, 160, 22))
        self.horizontalSlider_gh.setMinimum(0)
        self.horizontalSlider_gh.setMaximum(20)
        self.horizontalSlider_gh.setPageStep(5)
        self.horizontalSlider_gh.setProperty("value", 20)
        self.horizontalSlider_gh.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_gh.setObjectName("horizontalSlider_gh")
        self.label_gh = QtWidgets.QLabel(self.tab_3)
        self.label_gh.setGeometry(QtCore.QRect(220, 140, 47, 12))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_gh.setFont(font)
        self.label_gh.setObjectName("label_gh")
        self.label_gl = QtWidgets.QLabel(self.tab_3)
        self.label_gl.setGeometry(QtCore.QRect(220, 250, 47, 12))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_gl.setFont(font)
        self.label_gl.setObjectName("label_gl")
        self.horizontalSlider_gl = QtWidgets.QSlider(self.tab_3)
        self.horizontalSlider_gl.setGeometry(QtCore.QRect(40, 250, 160, 22))
        self.horizontalSlider_gl.setMinimum(0)
        self.horizontalSlider_gl.setMaximum(20)
        self.horizontalSlider_gl.setPageStep(5)
        self.horizontalSlider_gl.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_gl.setObjectName("horizontalSlider_gl")
        self.label_threshold_5 = QtWidgets.QLabel(self.tab_3)
        self.label_threshold_5.setGeometry(QtCore.QRect(40, 190, 141, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_threshold_5.setFont(font)
        self.label_threshold_5.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_threshold_5.setObjectName("label_threshold_5")
        self.label_d0 = QtWidgets.QLabel(self.tab_3)
        self.label_d0.setGeometry(QtCore.QRect(220, 370, 47, 12))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_d0.setFont(font)
        self.label_d0.setObjectName("label_d0")
        self.label_threshold_6 = QtWidgets.QLabel(self.tab_3)
        self.label_threshold_6.setGeometry(QtCore.QRect(40, 310, 141, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_threshold_6.setFont(font)
        self.label_threshold_6.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_threshold_6.setObjectName("label_threshold_6")
        self.horizontalSlider_d0 = QtWidgets.QSlider(self.tab_3)
        self.horizontalSlider_d0.setGeometry(QtCore.QRect(40, 370, 160, 22))
        self.horizontalSlider_d0.setMinimum(1)
        self.horizontalSlider_d0.setMaximum(100)
        self.horizontalSlider_d0.setPageStep(10)
        self.horizontalSlider_d0.setProperty("value", 5)
        self.horizontalSlider_d0.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_d0.setObjectName("horizontalSlider_d0")
        self.label_threshold_7 = QtWidgets.QLabel(self.tab_3)
        self.label_threshold_7.setGeometry(QtCore.QRect(470, 30, 101, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_threshold_7.setFont(font)
        self.label_threshold_7.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_threshold_7.setObjectName("label_threshold_7")
        self.label_img_5 = QtWidgets.QLabel(self.tab_3)
        self.label_img_5.setGeometry(QtCore.QRect(470, 80, 200, 150))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_img_5.setFont(font)
        self.label_img_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_img_5.setObjectName("label_img_5")
        self.label_img_6 = QtWidgets.QLabel(self.tab_3)
        self.label_img_6.setGeometry(QtCore.QRect(470, 310, 200, 150))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_img_6.setFont(font)
        self.label_img_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_img_6.setObjectName("label_img_6")
        self.label_threshold_8 = QtWidgets.QLabel(self.tab_3)
        self.label_threshold_8.setGeometry(QtCore.QRect(470, 260, 141, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_threshold_8.setFont(font)
        self.label_threshold_8.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_threshold_8.setObjectName("label_threshold_8")
        self.label_c = QtWidgets.QLabel(self.tab_3)
        self.label_c.setGeometry(QtCore.QRect(220, 460, 47, 12))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_c.setFont(font)
        self.label_c.setObjectName("label_c")
        self.label_threshold_12 = QtWidgets.QLabel(self.tab_3)
        self.label_threshold_12.setGeometry(QtCore.QRect(40, 400, 141, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_threshold_12.setFont(font)
        self.label_threshold_12.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_threshold_12.setObjectName("label_threshold_12")
        self.horizontalSlider_c = QtWidgets.QSlider(self.tab_3)
        self.horizontalSlider_c.setGeometry(QtCore.QRect(40, 460, 160, 22))
        self.horizontalSlider_c.setMinimum(0)
        self.horizontalSlider_c.setMaximum(10)
        self.horizontalSlider_c.setPageStep(5)
        self.horizontalSlider_c.setProperty("value", 4)
        self.horizontalSlider_c.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_c.setObjectName("horizontalSlider_c")
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.label_img_8 = QtWidgets.QLabel(self.tab_4)
        self.label_img_8.setGeometry(QtCore.QRect(90, 90, 180, 180))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_img_8.setFont(font)
        self.label_img_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_img_8.setObjectName("label_img_8")
        self.label_threshold_13 = QtWidgets.QLabel(self.tab_4)
        self.label_threshold_13.setGeometry(QtCore.QRect(80, 40, 101, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_threshold_13.setFont(font)
        self.label_threshold_13.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_threshold_13.setObjectName("label_threshold_13")
        self.label_threshold_16 = QtWidgets.QLabel(self.tab_4)
        self.label_threshold_16.setGeometry(QtCore.QRect(280, 270, 141, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_threshold_16.setFont(font)
        self.label_threshold_16.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_threshold_16.setObjectName("label_threshold_16")
        self.label_threshold_17 = QtWidgets.QLabel(self.tab_4)
        self.label_threshold_17.setGeometry(QtCore.QRect(40, 270, 131, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_threshold_17.setFont(font)
        self.label_threshold_17.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_threshold_17.setObjectName("label_threshold_17")
        self.label_threshold_18 = QtWidgets.QLabel(self.tab_4)
        self.label_threshold_18.setGeometry(QtCore.QRect(530, 270, 221, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.label_threshold_18.setFont(font)
        self.label_threshold_18.setTextFormat(QtCore.Qt.MarkdownText)
        self.label_threshold_18.setObjectName("label_threshold_18")
        self.comboBox_blur = QtWidgets.QComboBox(self.tab_4)
        self.comboBox_blur.setGeometry(QtCore.QRect(310, 130, 181, 31))
        self.comboBox_blur.setObjectName("comboBox_blur")
        self.comboBox_blur.addItem("")
        self.comboBox_blur.addItem("")
        self.comboBox_blur.addItem("")
        self.textEdit__blur_type = QtWidgets.QTextEdit(self.tab_4)
        self.textEdit__blur_type.setGeometry(QtCore.QRect(540, 40, 201, 31))
        self.textEdit__blur_type.setObjectName("textEdit__blur_type")
        self.button_file_4 = QtWidgets.QPushButton(self.tab_4)
        self.button_file_4.setGeometry(QtCore.QRect(10, 10, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.button_file_4.setFont(font)
        self.button_file_4.setObjectName("button_file_4")
        self.label_img_9 = QtWidgets.QLabel(self.tab_4)
        self.label_img_9.setGeometry(QtCore.QRect(540, 90, 180, 180))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_img_9.setFont(font)
        self.label_img_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_img_9.setObjectName("label_img_9")
        self.label_img_11 = QtWidgets.QLabel(self.tab_4)
        self.label_img_11.setGeometry(QtCore.QRect(280, 320, 180, 180))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_img_11.setFont(font)
        self.label_img_11.setAlignment(QtCore.Qt.AlignCenter)
        self.label_img_11.setObjectName("label_img_11")
        self.label_img_12 = QtWidgets.QLabel(self.tab_4)
        self.label_img_12.setGeometry(QtCore.QRect(530, 320, 180, 180))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_img_12.setFont(font)
        self.label_img_12.setAlignment(QtCore.Qt.AlignCenter)
        self.label_img_12.setObjectName("label_img_12")
        self.label_img_10 = QtWidgets.QLabel(self.tab_4)
        self.label_img_10.setGeometry(QtCore.QRect(40, 320, 180, 180))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_img_10.setFont(font)
        self.label_img_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_img_10.setObjectName("label_img_10")
        self.tabWidget.addTab(self.tab_4, "")
        self.gridLayout.addWidget(self.tabWidget, 0, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(3)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.button_file.setText(_translate("MainWindow", "choose img"))
        self.button_fft.setText(_translate("MainWindow", "FFT"))
        self.label_img_1.setText(_translate("MainWindow", "img"))
        self.label_img_2.setText(_translate("MainWindow", "result"))
        self.toolButton.setText(_translate("MainWindow", "..."))
        self.toolButton_2.setText(_translate("MainWindow", "..."))
        self.label_img_7.setText(_translate("MainWindow", "img"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Part1"))
        self.label_img_4.setText(_translate("MainWindow", "result"))
        self.label_threshold_2.setText(_translate("MainWindow", "Original"))
        self.label_img_3.setText(_translate("MainWindow", "img"))
        self.label_threshold_3.setText(_translate("MainWindow", "After filter"))
        self.button_file_2.setText(_translate("MainWindow", "choose img"))
        self.label_cutoff.setText(_translate("MainWindow", "value"))
        self.label_threshold_9.setText(_translate("MainWindow", "1. Cut-off Frequency"))
        self.label_threshold_10.setText(_translate("MainWindow", "2.filter"))
        self.comboBox_filter.setItemText(0, _translate("MainWindow", "Ideal lowpass filter"))
        self.comboBox_filter.setItemText(1, _translate("MainWindow", "Butterworth lowpass filter"))
        self.comboBox_filter.setItemText(2, _translate("MainWindow", "Gaussian lowpass filter"))
        self.comboBox_filter.setItemText(3, _translate("MainWindow", "Ideal highpass filter"))
        self.comboBox_filter.setItemText(4, _translate("MainWindow", "Butterworth highpass filter"))
        self.comboBox_filter.setItemText(5, _translate("MainWindow", "Gaussian highpass filter"))
        self.button_go.setText(_translate("MainWindow", "GO"))
        self.label_threshold_11.setText(_translate("MainWindow", "3."))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Part2"))
        self.button_file_3.setText(_translate("MainWindow", "choose img"))
        self.label_threshold_4.setText(_translate("MainWindow", "Gamma_H"))
        self.label_gh.setText(_translate("MainWindow", "value"))
        self.label_gl.setText(_translate("MainWindow", "value"))
        self.label_threshold_5.setText(_translate("MainWindow", "Gamma_L"))
        self.label_d0.setText(_translate("MainWindow", "value"))
        self.label_threshold_6.setText(_translate("MainWindow", "D0(CutOff)"))
        self.label_threshold_7.setText(_translate("MainWindow", "Original"))
        self.label_img_5.setText(_translate("MainWindow", "img"))
        self.label_img_6.setText(_translate("MainWindow", "img"))
        self.label_threshold_8.setText(_translate("MainWindow", "homomorphic"))
        self.label_c.setText(_translate("MainWindow", "value"))
        self.label_threshold_12.setText(_translate("MainWindow", "C"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Part3"))
        self.label_img_8.setText(_translate("MainWindow", "img"))
        self.label_threshold_13.setText(_translate("MainWindow", "Original"))
        self.label_threshold_16.setText(_translate("MainWindow", "Wiener filter"))
        self.label_threshold_17.setText(_translate("MainWindow", "Inverse filter"))
        self.label_threshold_18.setText(_translate("MainWindow", "Subtraction"))
        self.comboBox_blur.setItemText(0, _translate("MainWindow", "-- choose blur method --"))
        self.comboBox_blur.setItemText(1, _translate("MainWindow", "Blur image"))
        self.comboBox_blur.setItemText(2, _translate("MainWindow", "Blur image (with noise)"))
        self.textEdit__blur_type.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'PMingLiU\'; font-size:12pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Type: </p></body></html>"))
        self.button_file_4.setText(_translate("MainWindow", "choose img"))
        self.label_img_9.setText(_translate("MainWindow", "img"))
        self.label_img_11.setText(_translate("MainWindow", "img"))
        self.label_img_12.setText(_translate("MainWindow", "img"))
        self.label_img_10.setText(_translate("MainWindow", "img"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "Part4"))


class MainWindow_controller(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__() # in python3, super(Class, self).xxx = super().xxx
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setup_control()


    # TODO
    def setup_control(self):
        self.ui.tabWidget.setCurrentIndex(0) # 設定從第一分頁開始顯示
        self.ui.button_file.clicked.connect(self.open_file)
        self.ui.button_file_2.clicked.connect(self.open_file)
        self.ui.button_file_3.clicked.connect(self.open_file)
        self.ui.button_file_4.clicked.connect(self.open_file)
        self.ui.button_fft.clicked.connect(self.part1_fft)
        self.ui.button_go.clicked.connect(self.part2_select_filter)

        self.ui.horizontalSlider_cutoff.valueChanged.connect(self.slider_show)
        self.ui.horizontalSlider_c.valueChanged.connect(self.slider_show)
        self.ui.horizontalSlider_d0.valueChanged.connect(self.slider_show)
        self.ui.horizontalSlider_gh.valueChanged.connect(self.slider_show)
        self.ui.horizontalSlider_gl.valueChanged.connect(self.slider_show)
        self.ui.horizontalSlider_c.valueChanged.connect(self.homomorphic_filter)
        self.ui.horizontalSlider_d0.valueChanged.connect(self.homomorphic_filter)
        self.ui.horizontalSlider_gh.valueChanged.connect(self.homomorphic_filter)
        self.ui.horizontalSlider_gl.valueChanged.connect(self.homomorphic_filter)
        self.ui.comboBox_blur.currentTextChanged.connect(self.part4)

    # plot histogram
    def plot_histogram(self, img):
        self.hist = np.zeros(256)
        # 計算各數值數量並儲存
        for i in np.unique(img):
            self.hist[i] = np.bincount(img.flatten())[i]

        self.x_axis = np.arange(256)
        plt.figure(figsize=(4,3))
        plt.bar(self.x_axis, self.hist)
        plt.title("Histogram")
        plt.savefig("Matplotlib.jpg")


    def get_qimg(self, img, width=200, height=150):
        if type(img) == str: # 路徑的話就做imread,否則直接使用
            img = cv2.imread(img, 0) # gray
        elif type(img) == np.ndarray:
             img = img

        img = self.img_resize(img, width=width, height=height)

        # 記得對彩色圖及黑白圖片的QImage.Format、bytesPerline設定
        # self.qimg = QImage(self.img, width, height, bytesPerline, QImage.Format_RGB888).rgbSwapped()
        if len(img.shape) == 3: # color img
            qimg = QImage(img, img.shape[1], img.shape[0], img.shape[1]*3, QImage.Format_RGB888).rgbSwapped()
        elif len(img.shape) == 2: # binary img
            qimg = QImage(img, img.shape[1], img.shape[0], img.shape[1], QImage.Format_Grayscale8).rgbSwapped()

        return qimg


    # get resize image
    def img_resize(self, img, width=200, height=150):
        if len(img.shape) == 3: # color img
            out = np.zeros((height, width, 3), np.uint8)
        elif len(img.shape) == 2: # binary img
            out = np.zeros((height, width), np.uint8)

        h, w = img.shape[0], img.shape[1]
        h2 = height / h
        w2 = width / w
        for i in range(height):
            for j in range(width):
                x = int(i / h2)
                y = int(j / w2)
                if len(img.shape) == 3: # color img
                    out[i, j, :] = img[x, y, :]
                elif len(img.shape) == 2: # binary img
                    out[i, j] = img[x, y]

        return out


    def set_filter(self, size=3):
        filter =  np.array([[1,1,1],
                            [1,1,1],
                            [1,1,1]]) / 9
        return filter


    def iterate_regions(self, image):
        h, w = image.shape
        # 將 im_region, i, j 存到迭代器中，讓後面遍歷
        for i in range(h - 2):
            for j in range(w - 2):
                im_region = image[i:(i + 3), j:(j + 3)]
                yield im_region, i, j


    # zero padding
    def padding(self, data, n=2):
        # data = np.pad(data, ((n,n),(n,n)))
        return np.pad(data, ((n,n),(n,n)))


    def open_file(self):
        self.img_name, _ = QFileDialog.getOpenFileName(self,
                "Open file",
                "./")   # start path
        # if self.img_name is None:
        #     return
        self.img_name = self.img_name.split("/")[-1] # 取檔案路徑最後一個分割，即為檔名
        self.raw_img = cv2.imread(self.img_name, 0) # gray

        qimg = self.get_qimg(self.raw_img)

        # 判斷要顯示在哪個分頁上
        if self.ui.tabWidget.currentIndex() == 0:
            self.ui.label_img_1.setPixmap(QPixmap.fromImage(qimg))
        elif self.ui.tabWidget.currentIndex() == 1:
            self.ui.label_img_3.setPixmap(QPixmap.fromImage(qimg))
        elif self.ui.tabWidget.currentIndex() == 2:
            self.ui.label_img_5.setPixmap(QPixmap.fromImage(qimg))
        elif self.ui.tabWidget.currentIndex() == 3:
            qimg = self.get_qimg(self.raw_img, width=150, height=150)
            self.ui.label_img_8.setPixmap(QPixmap.fromImage(qimg))


    # 顯示sliderbar數值
    def slider_show(self):
        self.ui.label_cutoff.setText(str(self.ui.horizontalSlider_cutoff.value()))
        self.ui.label_gh.setText(str(self.ui.horizontalSlider_gh.value()))
        self.ui.label_gl.setText(str(self.ui.horizontalSlider_gl.value()))
        self.ui.label_c.setText(str(self.ui.horizontalSlider_c.value()))
        self.ui.label_d0.setText(str(self.ui.horizontalSlider_d0.value()))


    # def forward(self):
        # '''
        # Performs a forward pass of the conv layer using the given input.
        # - input is a 2d numpy array
        # '''
        # input = self.img
        # h, w = input.shape
        # # output = np.zeros((h - 2, w - 2, self.num_filters))
        # output = np.zeros((h-2, w-2))
        # self.filter = self.set_filter()

        # for im_region, i, j in self.iterate_regions(input):
        #     output[i, j] = np.sum(im_region * self.filter)
        #     output = np.clip(np.uint8(output), 0, 255)

        # self.qimg = self.get_qimg(self.img_name)
        # self.ui.label_img_2.setPixmap(QPixmap.fromImage(self.qimg))


    def grayscale(self, img):
        B = img[:,:,0]
        G = img[:,:,1]
        R = img[:,:,2]
        return np.array((R/3 + G/3 + B/3), dtype=np.uint8)


    def fft_cv2(self, img):
        if len(img.shape) == 3:
            img = self.grayscale(img)

        # 將影像進行float轉換才能進行dft
        dft = cv2.dft(np.float32(img), flags=cv2.DFT_COMPLEX_OUTPUT)
        # 將spectrum平移到中心
        dft_shift = np.fft.fftshift(dft)
        # 將spectrum複數空間轉換為 0-255 區間
        magnitude_spectrum = 20 * np.log(cv2.magnitude(x=dft_shift[:,:,0], y=dft_shift[:,:,1]))

        return dft_shift, magnitude_spectrum


    # def ifft_cv2(self, dft_shift):
    #     idft_shift = np.fft.ifftshift(dft_shift)
    #     img_back = cv2.idft(idft_shift, flags=cv2.DFT_SCALE )
    #     # img_back = cv2.magnitude(img_back[:, :, 0], img_back[:, :, 1])

    #     return img_back


    def ifft_cv2(self, dft_shift):
        # 反向平移
        idft_shift = np.fft.ifftshift(dft_shift)
        if idft_shift.dtype ==  "complex128":
            img_back = np.fft.ifft2(idft_shift)

            return img_back.real

        else:
            img_back = cv2.idft(idft_shift, flags=cv2.DFT_SCALE)
            img_back = cv2.magnitude(img_back[:,:,0], img_back[:,:,1])
            return img_back



    def part1_fft(self):
        start = time.process_time()

        dft_shift, magnitude_spectrum = self.fft_cv2(self.raw_img)
        img_back = self.ifft_cv2(dft_shift)

        qimg = self.get_qimg(magnitude_spectrum)
        self.ui.label_img_2.setPixmap(QPixmap.fromImage(qimg))
        qimg = self.get_qimg(img_back)
        self.ui.label_img_7.setPixmap(QPixmap.fromImage(qimg))

        end = time.process_time()
        self.ui.textEdit.setText(f"Process time: {(end-start):0.10f} s")


    # 選擇要用哪個filter
    def part2_select_filter(self):
        if (self.ui.comboBox_filter.currentText()) == "Ideal lowpass filter":
            self.idal_filter(type="low")
        elif (self.ui.comboBox_filter.currentText()) == "Ideal highpass filter":
            self.idal_filter(type="high")
        elif (self.ui.comboBox_filter.currentText()) == "Butterworth lowpass filter":
            self.butterworth_filter(type="low")
        elif (self.ui.comboBox_filter.currentText()) == "Butterworth highpass filter":
            self.butterworth_filter(type="high")
        elif (self.ui.comboBox_filter.currentText()) == "Gaussian lowpass filter":
            self.gaussian_filter(type="low")
        elif (self.ui.comboBox_filter.currentText()) == "Gaussian highpass filter":
            self.gaussian_filter(type="high")


    def idal_filter(self, type="low"):
        # https://blog.csdn.net/qq_38463737/article/details/118682500
        dft_shift, magnitude_spectrum = self.fft_cv2(self.raw_img)
        # 設置截止頻率
        d0 = self.ui.horizontalSlider_cutoff.value()
        rows, cols = self.raw_img.shape[0], self.raw_img.shape[1]
        crow, ccol = int(rows/2), int(cols/2) # mask中心位置

        if type == "low":
            mask = np.zeros((rows, cols, 2), np.uint8)
            mask[crow-d0 : crow+d0, ccol-d0 : ccol+d0] = 1 # 設定mask
            # mask和頻譜圖像相乘濾波
            dft_shift = dft_shift * mask
        elif type == "high":
            # mask = np.ones((rows, cols, 2), np.uint8)
            # mask[crow-cut_off : crow+cut_off, ccol-cut_off : ccol+cut_off] = 0 # 設定mask
            dft_shift[crow-d0 : crow+d0, ccol-d0 : ccol+d0] = 0

        ## FIXME 為何要加上abs/clip才不會出現奇怪黑白色塊還未知
        # img_back = np.abs(self.ifft_cv2(dft_shift))
        img_back = np.clip(self.ifft_cv2(dft_shift), 0, 255)
        qimg = self.get_qimg(img_back)
        self.ui.label_img_4.setPixmap(QPixmap.fromImage(qimg))


    def butterworth_filter(self, type="low"):
        dft_shift, spectrum = self.fft_cv2(self.raw_img)

        ##### FIXME mask type用uint8就不行..........
        # mask = np.zeros((dft_shift.shape[0], dft_shift.shape[1], 2), dtype=np.uint8)
        # print(mask[0][0])
        # print(mask.dtype)
        mask = np.zeros((dft_shift.shape[0], dft_shift.shape[1], 2))
        # print(mask[0][0])
        # print(mask.dtype)

        n = 2
        d0 = self.ui.horizontalSlider_cutoff.value()
        ci, cj = mask.shape[0]//2, mask.shape[1]//2

        for i in range(mask.shape[0]):
            for j in range(mask.shape[1]):
                if type == "low":
                    denominator = 1 + ((math.sqrt((i - ci)**2 + (j - cj)**2) / d0) ** (2*n))
                elif type == "high":
                    denominator = 1 + (d0 / ((math.sqrt((i - ci)**2 + (j - cj)**2)) + 0.00000000001) ** (2*n)) # 避免分母為0

                mask[i, j] = 1 / denominator

        dft_shift = dft_shift * mask
        # img_back = np.abs(self.ifft_cv2(dft_shift))
        img_back = np.clip(self.ifft_cv2(dft_shift), 0, 255)
        qimg = self.get_qimg(img_back)
        self.ui.label_img_4.setPixmap(QPixmap.fromImage(qimg))


    def gaussian_filter(self, type="low"):
        dft_shift, magnitude_spectrum = self.fft_cv2(self.raw_img)
        mask = np.zeros((dft_shift.shape[0], dft_shift.shape[1], 2))
        d0 = self.ui.horizontalSlider_cutoff.value()
        ci, cj = mask.shape[0]//2, mask.shape[1]//2

        for i in range(mask.shape[0]):
            for j in range(mask.shape[1]):
                if type == "low":
                    power = -1 * ((math.sqrt((i - ci)**2 + (j - cj)**2) ** 2)) / (2 * (d0**2))
                    mask[i, j] = math.exp(power)
                elif type == "high":
                    power = -1 * ((math.sqrt((i - ci)**2 + (j - cj)**2) ** 2)) / (2 * (d0**2))
                    mask[i, j] = 1 - (math.exp(power))

        dft_shift = dft_shift * mask
        img_back = np.clip(self.ifft_cv2(dft_shift), 0, 255)
        qimg = self.get_qimg(img_back)
        self.ui.label_img_4.setPixmap(QPixmap.fromImage(qimg))


    # https://zhuanlan.zhihu.com/p/515812634
    def homomorphic_filter(self):
        dft_shift, magnitude_spectrum = self.fft_cv2(self.raw_img)
        mask = np.zeros((dft_shift.shape[0], dft_shift.shape[1], 2))
        ci, cj = mask.shape[0]//2, mask.shape[1]//2
        gh = self.ui.horizontalSlider_gh.value()
        gl = self.ui.horizontalSlider_gl.value()
        d0 = self.ui.horizontalSlider_d0.value()
        c = self.ui.horizontalSlider_c.value()

        for i in range(mask.shape[0]):
            for j in range(mask.shape[1]):
                d = math.sqrt((i - ci)**2 + (j - cj)**2)
                power = (-c * (d ** 2 / d0))
                mask[i, j] = (gh - gl) * (1 - math.exp(power)) + gl

        dft_shift = dft_shift * mask
        # img_back = np.abs(self.ifft_cv2(dft_shift))
        img_back = np.clip(self.ifft_cv2(dft_shift), 0, 255)
        qimg = self.get_qimg(img_back)
        self.ui.label_img_6.setPixmap(QPixmap.fromImage(qimg))


    def part4(self, noise=False):
        self.ui.textEdit__blur_type.setText("Type: "+str(self.ui.comboBox_blur.currentText()))
        a, b, T = 0.1, 0.1, 1
        dft_shift, magnitude_spectrum = self.fft_cv2(self.raw_img)
        mask = np.zeros((dft_shift.shape[0], dft_shift.shape[1], 2), dtype=complex) # 設定複數形式

        # blur
        for u in range(mask.shape[0]):
            for v in range(mask.shape[1]):
                denominator = math.pi * (u*a + v*b)
                power = -1j * math.pi * (u*a + v*b)
                mask[u,v] = (T / (denominator+ 0.00000000001)) * math.sin(math.pi * (u*a + v*b)) * cmath.exp(power) # 避免分母0

        dft_shift = dft_shift * mask
        # img_back = (self.ifft_cv2(dft_shift))
        img_back = np.abs(self.ifft_cv2(dft_shift))
        # img_back = self.ifft_cv2(dft_shift)
        qimg = self.get_qimg(img_back)
        self.ui.label_img_9.setPixmap(QPixmap.fromImage(qimg))


if __name__ == '__main__':
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow_controller()
    window.show()
    sys.exit(app.exec_())